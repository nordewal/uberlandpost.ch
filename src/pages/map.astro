---
import SiteLayout from "../layouts/site.astro";
---

<SiteLayout title="Karte">
    <style is:global>
        #map {
            position: relative;
            height: 100vh;
            overflow: hidden;
        }
        #map iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100% !important;
            height: 100% !important;
        }
    </style>

    <script type="text/javascript">
        let map;
        async function initMap() {
            const { Map } = await google.maps.importLibrary("maps");

            const map = new Map(document.getElementById("map"), {
                center: {lat: 27, lng:50},
                zoom: 3,
                mapId: 'f1a1ad3aa0270159',
                mapTypeId: google.maps.MapTypeId.TERRAIN,
            });

            addRouteDriven(map, "/CH-IN.json", "#b01c09");
            addRouteTransport(map, "/IN-AZ.json", "#FFA500");
            addRouteDriven(
                map,
                "https://s3.eu-central-2.wasabisys.com/uberlandpost/public-coords.json",
                "#FFA500",
            );
        }

        // Draw dashed line without tent markers
        async function addRouteTransport(map, jsonURL, color) {
            getJSON(jsonURL, function (data) {
                var lineSymbol = {
                    path: "M 0,-1 0,1",
                    strokeOpacity: 1,
                    strokeWeight: 2,
                    scale: 3,
                };
                // Draw line between locations
                var path = new google.maps.Polyline({
                    path: data,
                    geodesic: true,
                    strokeColor: color,
                    strokeWeight: 0,
                    icons: [
                        {
                            icon: lineSymbol,
                            offset: "0",
                            repeat: "15px",
                        },
                    ],
                });
                path.setMap(map);
            });
        }

        // Draw solid line with tent markers
        async function addRouteDriven(map, jsonURL, color) {
            getJSON(jsonURL, function (data) {
                // Draw line between locations
                var path = new google.maps.Polyline({
                    path: data,
                    geodesic: true,
                    strokeColor: color,
                    strokeOpacity: 1.0,
                    strokeWeight: 2,
                });
                path.setMap(map);

                addTentMarkers(map, data, color);
            });
        }

        async function addTentMarkers(map, data, color) {
            const {AdvancedMarkerElement, PinElement} = await google.maps.importLibrary("marker")
            const parser = new DOMParser();

            // Tent as an SVG
            const tentSvgString = '<svg xmlns="http://www.w3.org/2000/svg" height="20" width="20" viewBox="-100 -960 1160 1160"><circle fill= "'+color+'" fill-opacity="1" cx="480" cy="-400" r="580" /><path style="fill: white" d="M80-80v-186l350-472-70-94 64-48 56 75 56-75 64 48-70 94 350 472v186H80Zm400-591L160-240v80h120l200-280 200 280h120v-80L480-671ZM378-160h204L480-302 378-160Zm102-280 200 280-200-280-200 280 200-280Z"/></svg>';

            var infowindow = new google.maps.InfoWindow();

            var tentMarkers = [];
            var lastDay = -1;
            var dayCnt = 0;
            data.forEach((p) => {
                // we don't have the effective timezone, so we guess the offset from GMT based on the lontitude:
                // 360 degress is once around the earth, which has 24 hours. So 15 degrees is 1 hour offset.
                var ts = Date.parse(p["ts"]);
                var offsetHours = Math.round((24 / 360) * p["lng"]);
                var offsetDate = new Date(ts + offsetHours * 60 * 60 * 1000);

                var day = offsetDate.getUTCDate();
                if (lastDay == -1) {
                    lastDay = day;
                }
                if (lastDay != day) {
                    const tentSvg = parser.parseFromString(
                    tentSvgString,
                    "image/svg+xml",
                    ).documentElement;
                    tentSvg.style.transform = 'translateY(50%)';
                    var marker = new AdvancedMarkerElement({
                        position: { lat: p["lat"], lng: p["lng"] },
                        map: map,
                        content: tentSvg,
                        title: "Nacht #" + ++dayCnt,
                        map: null,
                    });
                    tentMarkers.push(marker);

                    var dayBeforeNight = new Date(offsetDate - 86400 * 1000);
                    var formattedDate = dayBeforeNight.toLocaleDateString(
                        "de-CH",
                        {
                            year: "numeric",
                            month: "short",
                            day: "numeric",
                        },
                    );
                    google.maps.event.addListener(marker, "click", function () {
                        infowindow.setContent(
                            "<p><b>" +
                                marker.title +
                                "</b><br/>" +
                                formattedDate +
                                "<br/><br/>Höhe: " +
                                Math.round(p["alt"]) +
                                " MüM<br/>Lat: " +
                                p["lat"] +
                                "<br/>Long: " +
                                p["lng"] +
                                "</p>",
                        );
                        infowindow.setPosition(marker.position);
                        infowindow.open(map);
                    });
                }
                lastDay = day;
            });

            var updateMarkerVisibility = function () {
                const zoom = map.getZoom();
                if (zoom) {
                    tentMarkers.forEach((m) => {
                        m.map = zoom >= 5 ? map: null;
                    });
                }
            };

            // hide markers (tents) at larger zoom levels
            map.addListener("zoom_changed", updateMarkerVisibility);
            updateMarkerVisibility();
        }

        function getJSON(url, callback) {
            var request = new XMLHttpRequest();
            request.open("GET", url, true);

            request.onload = function () {
                if (this.status >= 200 && this.status < 400) {
                    var data = JSON.parse(this.response);
                    callback(data);
                } else {
                    console.log(this);
                }
            };

            request.onerror = function () {
                console.log(this);
            };

            request.send();
        }

        // function to check if DOM is loaded
        function docReady(fn) {
            // see if DOM is already available
            if (
                document.readyState === "complete" ||
                document.readyState === "interactive"
            ) {
                // call on next available tick
                setTimeout(fn, 1);
            } else {
                document.addEventListener("DOMContentLoaded", fn);
            }
        }

        // When the window has finished loading create our google map below
        docReady(function () {
            initMap();
        });
    </script>
    <div id="map"></div>
    <!-- prettier-ignore -->
    <script>(g=>{var h,a,k,p="The Google Maps JavaScript API",c="google",l="importLibrary",q="__ib__",m=document,b=window;b=b[c]||(b[c]={});var d=b.maps||(b.maps={}),r=new Set,e=new URLSearchParams,u=()=>h||(h=new Promise(async(f,n)=>{await (a=m.createElement("script"));e.set("libraries",[...r]+"");for(k in g)e.set(k.replace(/[A-Z]/g,t=>"_"+t[0].toLowerCase()),g[k]);e.set("callback",c+".maps."+q);a.src=`https://maps.${c}apis.com/maps/api/js?`+e;d[q]=f;a.onerror=()=>h=n(Error(p+" could not load."));a.nonce=m.querySelector("script[nonce]")?.nonce||"";m.head.append(a)}));d[l]?console.warn(p+" only loads once. Ignoring:",g):d[l]=(f,...n)=>r.add(f)&&u().then(()=>d[l](f,...n))})
        ({key: "AIzaSyBwzJAQLP6pYc7_aoMRQmmbWiR6Uvhs7As", v: "weekly"});</script>
</SiteLayout>
