---
import { CollectionEntry, getCollection } from "astro:content";
import { Image, getImage } from "astro:assets";
import ContentLayout from "../../layouts/content.astro";
import FormattedDate from "../../components/FormattedDate.astro";

export async function getStaticPaths() {
	const posts = await getCollection("blog");
	return posts.map((post) => ({
		params: { slug: post.slug },
		props: post,
	}));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();

const images = await Promise.all(
	[post.data.images]
		.flat()
		.filter((i) => i !== undefined)
		.map(async (i) => {
			return {
				original: await getImage({
					src: i.img,
					alt: i.desc,
				}),
				thumbnail: await getImage({
					src: i.img,
					width: 400,
					alt: i.desc,
				}),
			};
		})
);
---

<ContentLayout title={post.data.title}>
	<style lang="scss" is:global>
		@import "../../styles/post.scss";
		@import "photoswipe/style.css";
	</style>
	<script>
		import PhotoSwipeLightbox from "photoswipe/lightbox";
		import PhotoSwipe from "photoswipe";
		import Masonry from "masonry-layout";
		import imagesLoaded from "imagesloaded";

		// PhotoSwipeLightbox is the nice UI when clicking on a picture

		// fullscreen capability
		const fullscreenAPI = getFullscreenAPI();
		const pswpContainer = getContainer();
		function getFullscreenPromise() {
			// Always resolve promise,
			// as wa want to open lightbox
			// (no matter if fullscreen is supported or not)
			return new Promise((resolve) => {
				if (!fullscreenAPI || fullscreenAPI.isFullscreen()) {
					// fullscreen API not supported, or already fullscreen
					resolve();
					return;
				}

				document.addEventListener(
					fullscreenAPI.change,
					(event) => {
						pswpContainer.style.display = "block";
						// delay to make sure that browser fullscreen animation is finished
						setTimeout(function () {
							resolve();
						}, 300);
					},
					{ once: true }
				);

				fullscreenAPI.request(pswpContainer);
			});
		}
		// Simple fullscreen API helper,
		// supports unprefixed and webkit-prefixed versions
		function getFullscreenAPI() {
			let api;
			let enterFS;
			let exitFS;
			let elementFS;
			let changeEvent;
			let errorEvent;

			if (document.documentElement.requestFullscreen) {
				enterFS = "requestFullscreen";
				exitFS = "exitFullscreen";
				elementFS = "fullscreenElement";
				changeEvent = "fullscreenchange";
				errorEvent = "fullscreenerror";
			} else if (document.documentElement.webkitRequestFullscreen) {
				enterFS = "webkitRequestFullscreen";
				exitFS = "webkitExitFullscreen";
				elementFS = "webkitFullscreenElement";
				changeEvent = "webkitfullscreenchange";
				errorEvent = "webkitfullscreenerror";
			}

			if (enterFS) {
				api = {
					request: function (el) {
						if (enterFS === "webkitRequestFullscreen") {
							el[enterFS](Element.ALLOW_KEYBOARD_INPUT);
						} else {
							el[enterFS]();
						}
					},

					exit: function () {
						return document[exitFS]();
					},

					isFullscreen: function () {
						return document[elementFS];
					},

					change: changeEvent,
					error: errorEvent,
				};
			}

			return api;
		}
		function getContainer() {
			const pswpContainer = document.createElement("div");
			pswpContainer.style.background = "#000";
			pswpContainer.style.width = "100%";
			pswpContainer.style.height = "100%";
			pswpContainer.style.display = "none";
			document.body.appendChild(pswpContainer);
			return pswpContainer;
		}

		const lightbox = new PhotoSwipeLightbox({
			gallery: "#gallery",
			children: "a",
			pswpModule: PhotoSwipe,
			openPromise: getFullscreenPromise,
			// Append PhotoSwipe to our container
			appendToEl: fullscreenAPI ? pswpContainer : document.body,

			// disable opening/closing animations for fullscreen
			showAnimationDuration: 0,
			hideAnimationDuration: 0,

			paddingFn: (viewportSize) => {
				return {
					top: 0,
					bottom: 40,
					left: 0,
					right: 0,
				};
			},
		});
		lightbox.on("close", () => {
			pswpContainer.style.display = "none";
			if (fullscreenAPI && fullscreenAPI.isFullscreen()) {
				fullscreenAPI.exit();
			}
		});
		lightbox.on("uiRegister", function () {
			lightbox.pswp.ui.registerElement({
				name: "custom-caption",
				order: 9,
				isButton: false,
				appendTo: "root",
				html: "Caption text",
				onInit: (el, pswp) => {
					lightbox.pswp.on("change", () => {
						const currSlideElement =
							lightbox.pswp.currSlide.data.element;
						let captionHTML = "";
						if (currSlideElement) {
							captionHTML = currSlideElement
								.querySelector("img")
								.getAttribute("alt");
						}
						el.innerHTML = captionHTML || "";
					});
				},
			});
		});
		lightbox.init();

		// Masonry is the nice grid layout of the images
		var msnry = new Masonry(document.querySelector("#gallery"), {
			itemSelector: ".grid-item",
			columnWidth: ".grid-sizer",
			percentPosition: true,
		});

		// Re-arrange grid as images are loaded, otherwise it looks broken
		imagesLoaded("#gallery", () => {}).on("progress", function () {
			msnry.layout();
		});
	</script>
	<article>
		<h2>{post.data.title}</h2>
		<div class="meta">
			{post.data.country} â€¢ <FormattedDate date={post.data.date} />
		</div>
		<Image src={post.data.cover} width="1024" alt="" />
		<Content />
	</article>
	<div id="gallery" class="grid">
		<div class="grid-sizer"></div>
		{
			images.map((image) => (
				<a
					class="grid-item"
					href={image.original.src}
					data-pswp-width={image.original.attributes.width}
					data-pswp-height={image.original.attributes.height}
					target="_blank"
				>
					<img
						src={image.thumbnail.src}
						alt={image.original.attributes.alt}
					/>
					<p class="image-desc">{image.original.attributes.alt}</p>
				</a>
			))
		}
		<!-- </div> -->
	</div>

	<div id="disqus_thread" data-slug={post.slug} data-url={import.meta.env.SITE}></div>
	<script is:inline>
		/**
		 *  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
		 *  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables    */
		var disqus_config = function () {
			var data = document.getElementById("disqus_thread").dataset;
			this.page.url = data.url + "/blog/" + data.slug;
			this.page.identifier = data.slug;
			console.log(this.page.url)
			console.log(this.page.identifier)
		};
		(function () {
			// DON'T EDIT BELOW THIS LINE
			var d = document,
				s = d.createElement("script");
			s.src = "https://uberlandpost.disqus.com/embed.js";
			s.setAttribute("data-timestamp", +new Date());
			(d.head || d.body).appendChild(s);
		})();
	</script>
</ContentLayout>
